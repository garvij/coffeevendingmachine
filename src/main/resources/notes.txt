- inventory
- goes out - raise alert
- add ons
- extra sugar (each add on has a price)
- multiple portions of addons
- show total price
- reduce the invetnory
- dispensing service(mock this)
dispense(expresso) -> customer


dispensing change
100 - 8 = return 92 rs
- return exact change


Design a coffee vending machine with the below functions

Ability to choose a product
Expresso(only liquid coffee 10 ml)
Cappuccino (Espresso + milk)
Latte (Cappuccino + chocolate syrup)
inventory management and refilling capacity.
Ability to choose an addon on the coffee
Sugar added (add 0 $ to the total price)
Caramel Syrup (add 1 $ to the total price)
Ability to see the total price based on the choice.
dispense items purchased (mock the dispensing service)
Ability to collect the amount.
Ability to render exact remaining change.
Possible exceptions:
Sold out
Not fully paid
Not enough change.

What are we looking for
Clean code
oops concepts
correct design patterns
unit test-driven coding methodology.


classes -
VendingMachine
VendingMachineImpl -
will have apis to
1. choose product and return total price
2. accept money
3. get product and return balanceAmount
Product
Coin
Inventory
Ingredient
CoffeeMaker
- creates coffee
DispensingService(mocked) - not needed


exceptions
SoldOutException
NotFullyPaidException
NotEnoughChangeException





